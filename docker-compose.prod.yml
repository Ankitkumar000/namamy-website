version: '3.8'

services:
  namamy_app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: namamy_app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    volumes:
      - ./logs:/app/logs
      - ./public/uploads:/app/public/uploads
      - ./prisma:/app/prisma
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - namamy_network

  postgres:
    image: postgres:15-alpine
    container_name: namamy_db
    environment:
      - POSTGRES_DB=namamy_production
      - POSTGRES_USER=namamy_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - namamy_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U namamy_user -d namamy_production"]
      interval: 30s
      timeout: 10s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: namamy_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - namamy_app
    restart: unless-stopped
    networks:
      - namamy_network

  redis:
    image: redis:7-alpine
    container_name: namamy_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - namamy_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  namamy_network:
    driver: bridge