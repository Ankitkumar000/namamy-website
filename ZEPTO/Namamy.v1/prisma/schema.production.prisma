// Production Prisma Schema for Namamy.com
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String
  phone           String?
  role            Role     @default(USER)
  status          UserStatus @default(active)
  password        String?
  emailVerified   DateTime?
  image           String?
  loginCount      Int      @default(0)
  lastLoginAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  orders          Order[]
  reviews         Review[]
  addresses       Address[]
  carts           Cart[]
  newsletterSubs  NewsletterSubscription[]
  
  @@map("users")
  @@index([email])
  @@index([role])
}

model Product {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  description   String
  price         Float
  comparePrice  Float?
  category      String
  subcategory   String?
  tags          String   // JSON string
  weight        String
  images        String   // JSON string
  inStock       Boolean  @default(true)
  stockCount    Int      @default(0)
  rating        Float    @default(0)
  reviewCount   Int      @default(0)
  nutrition     String?  // JSON string
  ingredients   String?  // JSON string
  featured      Boolean  @default(false)
  status        ProductStatus @default(active)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  orderItems    OrderItem[]
  reviews       Review[]
  cartItems     CartItem[]
  
  @@map("products")
  @@index([slug])
  @@index([category])
  @@index([featured])
  @@index([status])
}

model Order {
  id              String        @id @default(cuid())
  userId          String
  status          OrderStatus   @default(PENDING)
  totalAmount     Float
  shippingAmount  Float         @default(0)
  taxAmount       Float         @default(0)
  discountAmount  Float         @default(0)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod @default(CASH_ON_DELIVERY)
  paymentId       String?
  shippingAddress String        // JSON string
  billingAddress  String?       // JSON string
  trackingNumber  String?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  user            User          @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
  
  @@map("orders")
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  
  @@map("order_items")
  @@index([orderId])
  @@index([productId])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      @db.SmallInt
  comment   String?
  status    ReviewStatus @default(pending)
  helpful   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  
  @@map("reviews")
  @@unique([userId, productId])
  @@index([productId])
  @@index([status])
}

model Address {
  id        String  @id @default(cuid())
  userId    String
  type      AddressType @default(shipping)
  name      String
  phone     String
  address1  String
  address2  String?
  city      String
  state     String
  zipCode   String
  country   String  @default("India")
  isDefault Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User    @relation(fields: [userId], references: [id])
  
  @@map("addresses")
  @@index([userId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String
  status    CartStatus @default(active)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  // Relations
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  
  @@map("carts")
  @@unique([userId, status])
  @@index([userId])
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  
  @@map("cart_items")
  @@unique([cartId, productId])
  @@index([cartId])
}

model Contact {
  id        String        @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  status    ContactStatus @default(NEW)
  priority  ContactPriority @default(MEDIUM)
  source    String        @default("CONTACT_FORM")
  category  String        @default("GENERAL")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  
  @@map("contacts")
  @@index([status])
  @@index([createdAt])
}

model NewsletterSubscription {
  id          String   @id @default(cuid())
  email       String   @unique
  userId      String?
  status      SubscriptionStatus @default(active)
  source      String   @default("HOMEPAGE")
  subscribedAt DateTime @default(now())
  unsubscribedAt DateTime?
  
  // Relations
  user        User?    @relation(fields: [userId], references: [id])
  
  @@map("newsletter_subscriptions")
  @@index([email])
  @@index([status])
}

model Banner {
  id          String      @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  linkUrl     String?
  type        BannerType  @default(HERO)
  status      BannerStatus @default(active)
  priority    Int         @default(0)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("banners")
  @@index([type])
  @@index([status])
}

model SiteSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      SettingType @default(text)
  category  String   @default("general")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("site_settings")
  @@index([category])
}

// Enums
enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  active
  inactive
  suspended
  deleted
}

enum ProductStatus {
  active
  inactive
  draft
  archived
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  ONLINE
  UPI
  CARD
  NET_BANKING
  WALLET
}

enum ReviewStatus {
  pending
  approved
  rejected
}

enum AddressType {
  shipping
  billing
  both
}

enum CartStatus {
  active
  abandoned
  converted
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ContactPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SubscriptionStatus {
  active
  inactive
  unsubscribed
}

enum BannerType {
  HERO
  PROMOTIONAL
  POPUP
  SIDEBAR
  FOOTER
}

enum BannerStatus {
  active
  inactive
  scheduled
  expired
}

enum SettingType {
  text
  number
  boolean
  json
  url
  email
}