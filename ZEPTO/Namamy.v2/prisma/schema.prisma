// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String
  phone       String?
  password    String
  role        String    @default("USER")
  status      String    @default("active")
  loginCount  Int       @default(0)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  orders    Order[]
  reviews   Review[]
  addresses Address[]
  
  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  price       Float
  comparePrice Float?
  category    String
  subcategory String?
  tags        String   // JSON string
  weight      String
  images      String   // JSON string
  inStock     Boolean  @default(true)
  stockCount  Int      @default(0)
  nutrition   String?  // JSON string
  ingredients String   // JSON string
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems OrderItem[]
  reviews    Review[]
  
  @@map("products")
}

model Order {
  id              String  @id @default(cuid())
  userId          String
  status          String  @default("PENDING")
  totalAmount     Float
  shippingAmount  Float   @default(0)
  taxAmount       Float   @default(0)
  discountAmount  Float   @default(0)
  paymentStatus   String  @default("PENDING")
  paymentMethod   String?
  paymentId       String?
  shippingAddress String  // JSON string
  billingAddress  String? // JSON string
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  
  @@map("reviews")
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  type      String   @default("HOME")
  name      String
  phone     String
  address1  String
  address2  String?
  city      String
  state     String
  pincode   String
  country   String   @default("India")
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
  
  @@map("addresses")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  status    String   @default("NEW")
  priority  String   @default("MEDIUM")
  source    String   @default("CONTACT_FORM")
  category  String   @default("GENERAL")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("contacts")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  status    String   @default("ACTIVE")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("newsletter")
}